HEADING LARGE: INTRODUCTION

This lab explores how to get a cell shading effect in Maya.

intro_far.png

<img src="https://raw.githubusercontent.com/saurabhmitra/ucbugg/gh-pages/labs/toon%20shading/intro_close.png" style="width:50%;height:50%;">

HEADING MEDIUM: Pros of toon shading:
Renders super fast (< 1 min per frame generally)
Great control of colors in your scene.
Some people dig the style

HEADING MEDIUM: Cons of toon shading:
Takes a bit of setup even for basic features
High likelihood of an uncanny effect (See Uncanny 2D CG)
Particular to this lab: In this lab, toon shading is done with Arnold, the built-in renderer in Maya, not Renderman. If you want to combine toon shading and Renderman features, you may have to do some compositing in post.

HEADING MEDIUM: Pipeline
In this lab, toon shading is just using special shaders in Arnold, the built-in renderer in Maya. You can start toon shading as soon as you are done modeling your assets. You only need to unwrap UVs if you are attaching an image texture to the asset (see Attaching Image Textures/Shading the Pupils). Toon shading will require extra steps in rendering and compositing if you want to render image sequences with alpha channel (see Rendering Image Sequences).





HEADING LARGE: Getting Started
Download the toon shader lab here and set your project to it:
FILE: ToonShaderLab.zip

Open ToonShadingLab_Start.ma. You should see a sphere, a human, and a directional light.

getting_started_0.png





HEADING LARGE: Set the Renderer to Arnold

The toon shaders we are using are part of Arnold, the default renderer that Maya comes with, so let’s set our current renderer to that. Open render settings by clicking on the icon with the clapboard and the gear.

set_renderer_to_arnold_0.png

Set the renderer to Arnold:

set_renderer_to_arnold_1.png





HEADING LARGE: Creating a Toon Shader
This lab will cover 3 main parts of toon shading: base colors, edges (the outline of color around objects), and rim light (the edge of light around objects)

basic_toon_shading_0.png

Let’s attach a toon shader to the sphere. Hold down the right mouse button on the sphere and in the menu that appears, select Assign New Material.

basic_toon_shading_1.png

Under the Arnold, Shader tab, select aiToon.

basic_toon_shading_2.png

In the attribute editor for the sphere, you should see that an aiToon shader has been attached to the sphere.

basic_toon_shading_3.png






HEADING LARGE: Base Colors
Find the Base section of the toon shader.

basic_toon_shading_4.png

Set Color to any color you want. I’ll set mine to red.

basic_toon_shading_5.png

This is what it looks like if you render the scene now.

basic_toon_shading_6.png

The colors are incorrect and we want a sharper cutoff between the lights and darks of the sphere. To fix this, let’s add a ramp to the base color (This is easier to explain after it’s seen, so let’s set it up and explain later). Click the grid icon next to the Tonemap attribute.

basic_toon_shading_7.png

Select Ramp

basic_toon_shading_8.png

In the ramp, set interpolation to None (since we want no interpolation), and drag the white circle to the middle of the ramp

basic_toon_shading_9.png

You should end up with a ramp that’s half black and half white.

basic_toon_shading_10.png

Click on the black circle and set the Selected Color from black to a lighter grey.

basic_toon_shading_11.png

If you render the scene now, it looks like this.

basic_toon_shading_12.png

Explanation: What’s going on is that for the lighter parts of the sphere, the ramp’s white is mixed with the original red color (still the original red), and in the darker parts of the sphere, the ramp’s grey is mixed with the original red color (a darker red).

The x-axis of the ramp represents dark to light. You could actually add more than 2 colors to the ramp and get more complex shading. The color mixing method is equivalent to the “multiply” effect in Photoshop.

This is what happens when I change the grey to a light blue.

basic_toon_shading_13.png

This is what happens when I change the grey to a light brown.

basic_toon_shading_14.png





HEADING LARGE: Edges
Find the Edge section of the toon shader.

edge_0.png

The default parameters are actually perfect. The only reason why they aren’t showing up is because we need a contour filter.

Open up the render settings again

edge_1.png

Open up the Filter section

edge_2.png

Set the filter to Contour.

edge_3.png

If you render the scene now, it looks like this.

edge_4.png

You can edit the line width and color in the toon shader.




HEADING LARGE: Rim Light
Find the Rim Lighting section in the toon shader.

rim_light_0.png

Set the light color to white.

rim_light_1.png

If you render the scene now, it looks like this.

rim_light_2.png

Currently, the rim light fades gradually to the center of the sphere. We want a sharper cutoff between the lightest and darkest parts of the rim light. Sound familiar? We need another ramp!

Attach a ramp to the Color attribute by clicking on the grid icon next to it. Select Ramp in the menu that pops up. Again, make a half black half white ramp.

rim_light_3.png

If you render the scene now, it looks like this.

rim_light_4.png

We want the rim light to be thinner. There are two ways to do this.
1. Decrease the white part of the ramp.

rim_light_5.png

Or
2. Back in the toon shader’s Rim Lighting section, decrease the Width parameter (I find that 0.4 works well)

rim_light_6.png

If you render the scene now, it looks like this.

rim_light_7.png




HEADING LARGE: Shade the character!
Try shading all of the character except his pupils and eye highlights. Colors are up to you. You can select individual faces and assign toon shaders to them to make his skin and suit different colors. (Applying different shaders to different faces on one model is actually considered bad practice, but seems to work fine for toon shaders)

intro_far.png




HEADING LARGE: Shading the Eye Highlights
The eye highlights (the little circles on his pupils) are going to be white no matter what and they don’t need edges. There is a convenient shortcut shader for that: a Flat shader!

Select the eye highlights.

highlights_0.png

Instead of a toon shader, assign an aiFlat shader to them.

highlights_1.png

In the aiFlat shader, the color attribute should already be white.

highlights_2.png

If you render the scene now, it looks like this. It looks the same as before, but now the eye highlights will be this shade of white no matter what the lighting conditions are.

highlights_3.png





HEADING LARGE: Attaching Image Textures/Shading the Pupils
We are going to attach a texture to a toon shader. Select the pupils and assign a toon shader to them.

texture_0.png

In the Base section, click on the grid icon next to the Color attribute.

texture_1.png

Select File

texture_2.png

Click on the folder icon.

texture_3.png

In the sourceimages folder, select GrunkPupil.png

texture_4.png

If you render the scene now, it looks like this. The colors may look a bit off since you haven't created a ramp in the base colors section.

texture_5.png

Continue setting up the shader as you normally would (ex: base color ramp, edge. You probably won’t need rim lighting, though).

When you render the scene now, it looks like this.

intro_close.png
