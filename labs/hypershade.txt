HEADING LARGE: INTRODUCTION

Advanced Shading Lab: Nodes and Layers

The objective of this lab is to clarify some of the tools at your disposal when it comes to shading your scenes. The advantage of using Renderman’s LM materials rather than pxrDisney materials is that you can mix and combine shaders in interesting ways. The materials you make in this lab are meant to get you in the habit of using fractal noise or custom image maps to control properties of your material. These customizations are made possible through hypershade. Check this guide for an introduction to the essentials of the hypershade editor.

We're going to start by replicating an automotive-style metalic paint.

Create a sphere to act as your test object and apply a LMMetal material. Create or import an environment sphere to provide lighting. This zip includes a variety of useful environment lights and example materials which may be helpful.

Next, open Hypershade (Window->Rendering Editors->Hypershade). Select your LMMetal in the browser and press the expand button to isolate that node network.

node.PNG
This will show incoming and outgoing connections

advanced1.PNG

Press tab in the main field and type LMLayer. Press enter to create a new LMLayer node. The LMLayer node is a big one. It has the potential to have the complexity of an entire material. We’re going to use this layer to add a varnish to our metal. Pixar provides this useful guide which shows optical interactions between metal and an overlay: 

lmDiagram.jpg
Credit: Pixar


In order to make our metallic paint, we want a colored varnish with low roughness and a metal underneath will relatively high roughness.
Go ahead and bump of the roughness of your metal so it catches and scatters more light (a value around .4 should work fine).

advanced2.PNG

Our LMLayer is going to pass on a Clear Coat attribute to our metal. We don't want the layer to interfere with the metal's existing diffuse and specular properties. In LMLayer's attributes, turn off diffuse and specular influence and turn on Clear Coat:

advanced5.PNG

Clear Coat applies a translucent layer which can tint the light that travels through it. Change the transmission color to change your paint color.
Wire the “Result” of your LMLayer into the “LMLayer” input of your metal. You'll notice that your color probably hasn't taken effect. By increasing the Clear Coat's thickness property, you increase it's ability to influence the color. Feel free to fiddle with these values and get a grasp on how they correspond to your rendered result. Remember to keep the roughness of the clear coat low to allow light to pass through it.

Something that Pixar developed while working on cars was a method to add sparkles to their metallic paint. PxrFlakes is a pattern node which applies white spots in random configurations. PxrFlakes has two outputs, Result A and Result N. Result A gives an array of values ranging from 0-1. This can be useful for bump maps, or even color (If wired into red, blue, and green channels). We’re going to use result N. As it’s name implies, this provides a normal map based on the flakes. The “flake randomness” causes flakes/spots to change the direction they face, or their “normals.” When we wire in the Result N to our metal’s Bump Normals we should get sparkles. The idea is that the random flakes will either bounce light into or away from the camera causing a range of brightness which varies randomly across the surface. Create a PxrFlakes node and wire the Result N to the
Bump Normal of the Metal. You'll likely want to play with the frequency and flake size until your renders start to match the image at the start of this guide on PxrFlakes Attributes

metpaint.PNG


Once you're happy with your car paint we move on to the step where we ruin it.

HEADING LARGE: LMLAYERS AND RUST

If you look at your varnish LMLayer, you'll notice that it has an LMLayer input like your metal. This means we can apply additional layers to form more complex configurations. The varnish layer we made is designed to cover the entire metal and doesn't interfere with existing properties - it just adds a clear coat. The next layer we add will entirely overwrite material properties but only in the places we want it to.

Create another LMLayer node and rename it "Rust Layer." This time, check all 3 boxes for diffuse, specular, and clear coat. Since our rust won't be shiny, turn up the diffuse and specular roughness and eliminate the thickness of the clear coat.

ADVANCED8.PNG

If you wired in the rust layer to the varnish layer (Rust "Result" to Varnish "LMLayer"), you'll notice that it blends with everything in a messy way. We'd rather have the rust cover certain pieces of the mesh and leave the paint intact elsewhere. LMLayers have a "Layer Mask" attribute which determines where the layer is applied. Using this attribute, you could create a custom UV map and hand-paint exactly where you want your rust to appear. For this example, we're going to apply the rust randomly. To do so, we're going to need a fractal. Create a PxrFractal and wire it into the layer mask for the rust LMLayer. If you rerender, it will still look messy. The problem is, the fractal produces a range of values between 0 and 1. Any intermediate value between 0 and 1 will mix our materials. By increasing the contrast of our fractal, we can force it to have areas of just 1 or 0 effectively turning on and off our rust based on which parts of the fractal were darker. Create a contrast node and wire the result of the fractal to one of the input values. In the attribute editor for the contrast node, you can increase the contrast (from a default 2). 4 should max things out sufficiently. Rendering now, you should have sectors where the paint is untouched and sectors where your rust layer is in charge.

newadv2.PNG

contrast.PNG

Unfortunately, our rust isn't quite the right color. Rust also isn't a constant color so just changing the attribute won't do the trick. Instead we're going to use more fractals. If we wired in a new fractal to the color attribute, the color would just range from black to white. Instead, we're going to use a PxrMix node. PxrMix takes in to colors (or whole maps if you want to get fancy) and will combine them according to the "mix" attribute. A value of 0 for mix will return the first input. A value of 1 will return the 2nd. Values in between will combine them in different ratios. By wiring our fractal to the mix, we'll get a healthy jumble between both colors. For my rust, I went with a red-orange and grey. See if you can make a better mix.

newadv3.PNG

color.PNG

We also want our rust layer to look coarse to the touch. A high frequency normal map will five it the rough, powdery look we're going for. We're going to use another fractal node along with a PxrBump node. PxrBump converts a hightmap (a black and white output like the one from our fractal) into a normal map which guides the direction of the surface. Wire the fractal result into the "Input Bump." By default, the scale of the normals will be too intense. Rendering the default would make everything look lumpy. Greatly reducing the "scale" attribute of the PxrBump will get us closer to our desired look. Also, since we want these normals to dig into the surface rather than push them out, we can flip their direction by making the scale negative.

newadv4.PNG

normals2.PNG

This is a rough render of my result.

I hope this example helps you understand what LMMaterials can be used for and prompts you to explore what other renderman nodes might help in your animation. Next time you create a node, just type "pxr" and scroll through the options. Try out things that sound interesting and see if you can figure out how they work. If you have questions on how to make other materials, ask a facilitator for help. Now that you understand how to navigate the node editor, it will be easier for us to guide you through more advanced techniques.